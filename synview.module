<?php

/**
 * @file
 * The main file for the tripal go module.
 */

// Application Programmers Interface
require_once 'api/synview.api.inc';

// insert/delete synteny blocks according to synteny file 
require_once 'includes/synview.syn_parser.inc';

// synteny Node functionality
require_once 'includes/synview.node.inc';

// Functions specific to themeing (ie: preprocess)
require_once 'theme/synview.theme.inc';

// Administration for furture
//require_once 'includes/synview.admin.inc';

/**
 * Implements hook_menu().
 */
function synview_menu() {
  // search syntenic block form
  $items['synview/search'] = array(
    'title' => 'Search Syntenic Blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('synview_search_form'),
    'access arguments' => array('access content'),
    'file' => 'includes/synview_search_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // display search result
  $items['synview/search/result/%'] = array(
    'title' => 'Search Result for Syntenic Blocks',
    'page callback' => 'synview_search_result',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // synteny (MCScanX) dataset Node 
  $items['node__syn'] = array(
    'template' => 'node--syn',
    'render element' => 'node',
    'base hook' => 'node',
    'path' => 'themesyn',
  );

  // Display Syntenic Block
  $items['synview/block/%'] = array(
    'title' => 'Display Syntenic Blocks',
    'page callback' => 'display_block',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // help
  $items['admin/tripal/extension/tripal_synview/help'] = array(
    'title' => 'Help',
    'page callback' => 'theme',
    'page arguments' => array('synview_help'),
    'access arguments' => array('administer tripal'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function synview_theme() {

  $items = array();
  $path = drupal_get_path('module', 'synview');

  // explain the detail
  // this hook create a array of theme through array item
  // the key in array is like show_goenrich_report
  // the value tell drupal where to find template page 
  //   template: template name, and file must has suffix .tpl.php 
  //   path: where to find template file 
  // use theme('key') to call the them

  // search result
  $items['synview_search_result'] = array(
    'template' => 'synview_search_result',
    'path' => "$path/theme",
  );


  // Displays the pwy enrich results for each job
  $items['display_block'] = array(
    'template' => 'display_block',
    'path' => "$path/theme",
  );

  // Module Help
  $items['synview_help'] = array(
    'template' => 'synview_help',
    'path' => "$path/theme",
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function synview_help($path, $arg) {
  if ($path == 'admin/help#synview') {
    return theme('synview_help');
  }
}

/**
 * Dispaly single block 
 *
 * @param $block_id
 *
 * @return $result
 *  Return HTML output of the block to be displayed to the user
 *
 */
function display_block($block_id) {
  return theme('display_block', array('block_id' => $block_id));
}

/**
 * retrieve blocks from drupal database according to location
 * 
 * @param org_id chr start end array_of_ref_org_id
 * 
 * @return $block
 *         array of searched blocks
 */
function synview_search_result($action) {

  if (!array_key_exists('tripal_synview_search', $_SESSION)) {
    drupal_goto('synview/search');
  }

  $org_id  = $_SESSION['tripal_synview_search']['SELECT_GENOME'];
  $chr     = $_SESSION['tripal_synview_search']['SELECT_CHR'];
  //$start   = $_SESSION['tripal_synview_search']['START'];
  //$end     = $_SESSION['tripal_synview_search']['END'];
  $ref_org = $_SESSION['tripal_synview_search']['REFORG'];
  $end_pos = $_SESSION['tripal_synview_search']['RLEN'][$org_id][$chr];

  # define search mode, 0 for query_org is different with hit_org; 1 for query and hit org are same 
  $search_mode = 0; 
  if (array_key_exists($org_id, $ref_org)) {
    $search_mode = 1;
  }

  //dpm($_SESSION['tripal_synview_search']);

  if ($action) {
    if ($action == 'left') {
      if ($start > 100000) { 
        $start = $start - 1000000; 
      } else {
        $start = 1;
      }
      if ($end > 1000000) {
        $end = $end - 1000000;
      }
    }
    elseif ($action == 'right') {
      if ($end < $end_pos - 1000000) {
        $end = $end + 1000000;
      } else {
        $end = $end_pos;
      }
      
      if ($start < $end - 1000000) {
        $start = $start + 1000000;
      }
    }
    else {

    }
  }

  //$_SESSION['tripal_synview_search']['START'] = $start;
  //$_SESSION['tripal_synview_search']['END'] = $end;

  $org_opts = get_organism_options();

  // search block on one organism of select chrosome
  // find block between start and end, also cover start and end, 
  $args = array( 
    ':type_name' => 'syntenic_region',
    ':org_id' => $org_id, 
    ':chr' => $chr
  );

  $where_location = '';//"AND 
  //  ((FL.fmin < :start AND FL.fmax > :start) OR 
  //   (FL.fmin < :end AND FL.fmax > :end) OR 
  //   (FL.fmin > :start AND FL.fmax < :end)
  //  )";
  //$args[':start'] = $start;
  //$args[':end'] = $end;

  $sql = "SELECT F.feature_id, F.name, FL.srcfeature_id, FL.fmin, FL.fmax, FL.strand FROM chado.feature F
     LEFT JOIN chado.cvterm CVT ON F.type_id = CVT.cvterm_id 
     LEFT JOIN chado.featureloc FL ON F.feature_id = FL.feature_id 
     WHERE
       CVT.name = :type_name AND F.organism_id = :org_id AND FL.srcfeature_id = :chr
       $where_location
     ORDER BY FL.fmin
     ";
  $results = chado_query( $sql, $args);
  
  // get all the feature_id of selected synteny_region 
  // then retrieve all corresponding synteny_regions in other organisms of these selected synteny_region 
  $search_feature_id = array();
  $search_results = array();
  foreach ($results as $r) { 
    $search_feature_id[] = $r->feature_id;
    $search_results[$r->feature_id] = $r;
  }

  $sql = "SELECT S.blockid, S.b1, F.organism_id as org1, S.b2, T.organism_id as org2, S.score, S.evalue FROM synblock S
     LEFT JOIN chado.feature F ON S.b1 = F.feature_id
     LEFT JOIN chado.feature T ON S.b2 = T.feature_id 
     WHERE S.b1 IN (:bid) OR S.b2 IN (:bid)";
  $res = chado_query($sql, array(':bid' => $search_feature_id));

  // filter the result by $ref_org
  // only the blocks in match ref_org will be exported
  $blocks = array();
  // the array syn_region used for store region information
  $syn_region = array(); 

  // jdata: array for json data
  $jdata = array();

  $sql_loc = "SELECT FL.srcfeature_id, FL.feature_id, FL.fmin, FL.fmax, FL.strand FROM chado.featureloc FL
    WHERE FL.feature_id = :feature_id";

  foreach ($res as $b) {
      // filter the reference organism
      // b1 and b2 are selected org
      if ( $b->org1 == $org_id and $b->org2 == $org_id and $search_mode == 1 )
      {
          $loc1 = chado_query($sql_loc, array(':feature_id'=>$b->b1))->fetchObject();
          $b->b1_org    = $org_opts[$b->org1];
          $b->b1_sid    = $_SESSION['tripal_synview_search']['REF'][$b->org1][$loc1->srcfeature_id];
          $b->b1_len    = $_SESSION['tripal_synview_search']['RLEN'][$b->org1][$loc1->srcfeature_id];
          $b->b1_fmin   = $loc1->fmin;
          $b->b1_fmax   = $loc1->fmax;
          $b->b1_strand = $loc1->strand;

          $loc2 = chado_query($sql_loc, array(':feature_id'=>$b->b2))->fetchObject();
          $b->b2_org    = $org_opts[$b->org2];
          $b->b2_sid    = $_SESSION['tripal_synview_search']['REF'][$b->org2][$loc2->srcfeature_id];
          $b->b2_len    = $_SESSION['tripal_synview_search']['RLEN'][$b->org2][$loc2->srcfeature_id];
          $b->b2_fmin   = $loc2->fmin;
          $b->b2_fmax   = $loc2->fmax;
          $b->b2_strand = $loc2->strand;
          $blocks[$b->blockid] = $b;

          // build array for json
          if (!array_key_exists($b->org1, $jdata) ) {
            $jdata[$b->org1] = array();
            $jdata[$b->org1]['name'] = $org_opts[$b->org1];
			$jdata[$b->org1]['canvas'] = 'canvas' . $b->org1;
            $jdata[$b->org1]['ideoCollection'] = array();
			$jdata[$b->org1]['bedCollection']  = array();
			$jdata[$b->org1]['linkCollection'] = array(); 
			$jdata[$b->org1]['labCollection']  = array();
          }

          if (!array_key_exists($b->b1_sid, $jdata[$b->org1]['ideoCollection']) ) {
            $jdata[$b->org1]['ideoCollection'][$b->b1_sid] = array();
			$jdata[$b->org1]['ideoCollection'][$b->b1_sid]['id'] = $b->b1_sid;
            $jdata[$b->org1]['ideoCollection'][$b->b1_sid]['length'] = $b->b1_len / 1000000;
            $loc1->srcfeature_id == $_SESSION['tripal_synview_search']['SELECT_CHR'] ? $jdata[$b->org1]['ideoCollection'][$b->b1_sid]['color'] = 'blue' : $jdata[$b->org1]['ideoCollection'][$b->b1_sid]['color'] = 'red';
          }

          if (!array_key_exists($b->b2_sid, $jdata[$b->org1]['ideoCollection']) ) {
            $jdata[$b->org1]['ideoCollection'][$b->b2_sid] = array();
			$jdata[$b->org1]['ideoCollection'][$b->b2_sid]['id'] = $b->b2_sid;
            $jdata[$b->org1]['ideoCollection'][$b->b2_sid]['length'] = $b->b2_len / 1000000;
            $loc2->srcfeature_id == $_SESSION['tripal_synview_search']['SELECT_CHR'] ? $jdata[$b->org1]['ideoCollection'][$b->b2_sid]['color'] = 'blue' : $jdata[$b->org1]['ideoCollection'][$b->b2_sid]['color'] = 'red';
          }

          if (!array_key_exists($b->blockid, $jdata[$b->org1]['bedCollection']) ) {
            $jdata[$b->org1]['bedCollection'][] = array(
				'chr' => $b->b1_sid,
				'start' => $b->b1_fmin / 1000000, 
				'end' => $b->b1_fmax / 1000000, 
				'id' => $b->blockid, 'color' => 'green');

			$jdata[$b->org1]['bedCollection'][] = array(
                'chr' => $b->b2_sid,        
                'start' => $b->b2_fmin / 1000000, 
                'end' => $b->b2_fmax / 1000000, 
                'id' => $b->blockid, 'color' => 'green');

			$jdata[$b->org1]['linkCollection'][] = array(
				'bid' => $b->blockid,
				'source' => $jdata[$b->org1]['bedCollection'][count($jdata[$b->org1]['bedCollection'])-2], 
				'target' => $jdata[$b->org1]['bedCollection'][count($jdata[$b->org1]['bedCollection'])-1]);
          }
      }
      // b1 is ref orgs, b2 is select org
      if ( array_key_exists($b->org1, $ref_org) and $b->org2 == $org_id ) 
      {
          $r = $search_results[$b->b2];
          $loc1 = chado_query($sql_loc, array(':feature_id'=>$b->b1))->fetchObject();
          $b->b1_org    = $org_opts[$b->org1];
          $b->b1_sid    = $_SESSION['tripal_synview_search']['REF'][$b->org1][$loc1->srcfeature_id];
          $b->b1_len    = $_SESSION['tripal_synview_search']['RLEN'][$b->org1][$loc1->srcfeature_id];
          $b->b1_fmin   = $loc1->fmin;
          $b->b1_fmax   = $loc1->fmax;
          $b->b1_strand = $loc1->strand;

          $b->b2_org    = $org_opts[$b->org2];
          $b->b2_sid    = $_SESSION['tripal_synview_search']['REF'][$b->org2][$r->srcfeature_id];
          $b->b2_len    = $_SESSION['tripal_synview_search']['RLEN'][$b->org2][$r->srcfeature_id];
          $b->b2_fmin   = $r->fmin;
          $b->b2_fmax   = $r->fmax;
          $b->b2_strand = $r->strand;
          $blocks[$b->blockid] = $b;

          // build array for json
          if (!array_key_exists($b->org1, $jdata) ) {
            $jdata[$b->org1] = array();
            $jdata[$b->org1]['name'] = $org_opts[$b->org1];
            $jdata[$b->org1]['canvas'] = 'canvas' . $b->org1;
            $jdata[$b->org1]['ideoCollection'] = array();
            $jdata[$b->org1]['bedCollection']  = array();
            $jdata[$b->org1]['linkCollection'] = array();
            $jdata[$b->org1]['labCollection']  = array();
          }

          if (!array_key_exists($b->b1_sid, $jdata[$b->org1]['ideoCollection']) ) {
            $jdata[$b->org1]['ideoCollection'][$b->b1_sid] = array();
            $jdata[$b->org1]['ideoCollection'][$b->b1_sid]['id'] = $b->b1_sid;
            $jdata[$b->org1]['ideoCollection'][$b->b1_sid]['length'] = $b->b1_len / 1000000;
            $loc1->srcfeature_id == $_SESSION['tripal_synview_search']['SELECT_CHR'] ? $jdata[$b->org1]['ideoCollection'][$b->b1_sid]['color'] = 'blue' : $jdata[$b->org1]['ideoCollection'][$b->b1_sid]['color'] = 'red';
          }

          if (!array_key_exists($b->b2_sid, $jdata[$b->org1]['ideoCollection']) ) {
            $jdata[$b->org1]['ideoCollection'][$b->b2_sid] = array();
            $jdata[$b->org1]['ideoCollection'][$b->b2_sid]['id'] = $b->b2_sid;
            $jdata[$b->org1]['ideoCollection'][$b->b2_sid]['length'] = $b->b2_len / 1000000;
            $r->srcfeature_id == $_SESSION['tripal_synview_search']['SELECT_CHR'] ? $jdata[$b->org1]['ideoCollection'][$b->b2_sid]['color'] = 'blue' : $jdata[$b->org1]['ideoCollection'][$b->b2_sid]['color'] = 'red';
          }

          if (!array_key_exists($b->blockid, $jdata[$b->org1]['bedCollection']) ) {
            $jdata[$b->org1]['bedCollection'][] = array(
                'chr' => $b->b1_sid,
                'start' => $b->b1_fmin / 1000000,
                'end' => $b->b1_fmax / 1000000,
                'id' => $b->blockid, 'color' => 'green');

            $jdata[$b->org1]['bedCollection'][] = array(
                'chr' => $b->b2_sid,
                'start' => $b->b2_fmin / 1000000,
                'end' => $b->b2_fmax / 1000000,
                'id' => $b->blockid, 'color' => 'green');

            $jdata[$b->org1]['linkCollection'][] = array(
				'bid' => $b->blockid,
                'source' => $jdata[$b->org1]['bedCollection'][count($jdata[$b->org1]['bedCollection'])-2],
                'target' => $jdata[$b->org1]['bedCollection'][count($jdata[$b->org1]['bedCollection'])-1]);
          }

      }
      // b2 is ref orgs, b1 is select org
      elseif ( array_key_exists($b->org2, $ref_org) and $b->org1 == $org_id )
      {
          $r = $search_results[$b->b1];
          $b->b1_org    = $org_opts[$b->org1];
          $b->b1_sid    = $_SESSION['tripal_synview_search']['REF'][$b->org1][$r->srcfeature_id];
          $b->b1_len    = $_SESSION['tripal_synview_search']['RLEN'][$b->org1][$r->srcfeature_id];
          $b->b1_fmin   = $r->fmin;
          $b->b1_fmax   = $r->fmax;
          $b->b1_strand = $r->strand;

          $loc2 = chado_query($sql_loc, array(':feature_id'=>$b->b2))->fetchObject();
          $b->b2_org    = $org_opts[$b->org2];
          $b->b2_sid    = $_SESSION['tripal_synview_search']['REF'][$b->org2][$loc2->srcfeature_id];
          $b->b2_len    = $_SESSION['tripal_synview_search']['RLEN'][$b->org2][$loc2->srcfeature_id];
          $b->b2_fmin   = $loc2->fmin;
          $b->b2_fmax   = $loc2->fmax;
          $b->b2_strand = $loc2->strand;
          $blocks[$b->blockid] = $b;

          // build array for json
          if (!array_key_exists($b->org2, $jdata) ) {
            $jdata[$b->org2] = array();
            $jdata[$b->org2]['name'] = $org_opts[$b->org2];
            $jdata[$b->org2]['canvas'] = 'canvas' . $b->org2;
            $jdata[$b->org2]['ideoCollection'] = array();
            $jdata[$b->org2]['bedCollection']  = array();
            $jdata[$b->org2]['linkCollection'] = array();
            $jdata[$b->org2]['labCollection']  = array();
          }

          if (!array_key_exists($b->b1_sid, $jdata[$b->org2]['ideoCollection']) ) {
            $jdata[$b->org2]['ideoCollection'][$b->b1_sid] = array();
            $jdata[$b->org2]['ideoCollection'][$b->b1_sid]['id'] = $b->b1_sid;
            $jdata[$b->org2]['ideoCollection'][$b->b1_sid]['length'] = $b->b1_len / 1000000;
            $r->srcfeature_id == $_SESSION['tripal_synview_search']['SELECT_CHR'] ? $jdata[$b->org2]['ideoCollection'][$b->b1_sid]['color'] = 'blue' : $jdata[$b->org2]['ideoCollection'][$b->b1_sid]['color'] = 'red';
          }

          if (!array_key_exists($b->b2_sid, $jdata[$b->org2]['ideoCollection']) ) {
            $jdata[$b->org2]['ideoCollection'][$b->b2_sid] = array();
            $jdata[$b->org2]['ideoCollection'][$b->b2_sid]['id'] = $b->b2_sid;
            $jdata[$b->org2]['ideoCollection'][$b->b2_sid]['length'] = $b->b2_len / 1000000;
            $loc2->srcfeature_id == $_SESSION['tripal_synview_search']['SELECT_CHR'] ? $jdata[$b->org2]['ideoCollection'][$b->b2_sid]['color'] = 'blue' : $jdata[$b->org2]['ideoCollection'][$b->b2_sid]['color'] = 'red';
          }

          if (!array_key_exists($b->blockid, $jdata[$b->org2]['bedCollection']) ) {
            $jdata[$b->org2]['bedCollection'][] = array(
                'chr' => $b->b1_sid,
                'start' => $b->b1_fmin / 1000000,
                'end' => $b->b1_fmax / 1000000,
                'id' => $b->blockid, 'color' => 'green');

            $jdata[$b->org2]['bedCollection'][] = array(
                'chr' => $b->b2_sid,
                'start' => $b->b2_fmin / 1000000,
                'end' => $b->b2_fmax / 1000000,
                'id' => $b->blockid, 'color' => 'green');

            $jdata[$b->org2]['linkCollection'][] = array(
                'bid' => $b->blockid,
                'source' => $jdata[$b->org2]['bedCollection'][count($jdata[$b->org2]['bedCollection'])-2],
                'target' => $jdata[$b->org2]['bedCollection'][count($jdata[$b->org2]['bedCollection'])-1]);
          }
      }
      else 
      {
          
      }
   }

  $jdata_tmp = array();
  foreach ($jdata as $id => $data) {
    $data['ideoCollection'] = array_values($data['ideoCollection']);
    $jdata_tmp[] = $data;
  }

  $json_data = json_encode($jdata_tmp);
  $json_data = "var data = $json_data";
  drupal_add_js($json_data, array('type'=>'inline', 'scope'=>'footer','weight' => 50));

  $cluster = array();
  return theme('synview_search_result', array('cluster'=> $cluster, 'blocks' => $blocks, 'jdata' => $jdata_tmp));
}

/**
 * load synteny blocks of synteny file into chado database
 * 
 * @param $node
 * 
 * generate job args, then trigger a tripal job for parsing synteny file and loading blocks
 */
function synteny_file_load_job($node) 
{
  global $user;
  if ($node->syn_name) {
    $job_args = array(
      $node->syn_org1,
      $node->syn_org2,
      $node->syn_path,
    );
    tripal_add_job("Parse synteny file: $node->syn_path", 'tripal_synview',
      'synview_parse_synfile', $job_args, $user->uid);
  }
}

